# -*- coding: utf-8 -*-
"""trainModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BYAQteUBMP8qA_6CRuKbYeUHMsLgrKoI
"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import AveragePooling2D
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Input
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam

from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.preprocessing.image import load_img
from tensorflow.keras.utils import to_categorical
from sklearn.preprocessing import LabelBinarizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from imutils import paths
import matplotlib.pyplot as plt
import numpy as np
import argparse
import random
import os

!pwd

# Commented out IPython magic to ensure Python compatibility.
# %cd drive/MyDrive/Colab\ Notebooks/face_mask_detection

INIT_LR = 1e-4
EPOCHS = 50
BS = 32

print("[INFO] loading images...")
imageTrainPaths = list(paths.list_images('New Masks Dataset/Train'))
imageTestPaths = list(paths.list_images('New Masks Dataset/Test'))
imageValidPaths = list(paths.list_images('New Masks Dataset/Validation'))

def splitImageLabel(imagePaths):
  random.shuffle(imagePaths)
  data = []
  labels = []

  for imagePath in imagePaths:
    #print(imagePath.split(os.path.sep)[-2])
    label = imagePath.split(os.path.sep)[-2]

    image = load_img(imagePath, target_size=(224, 224))
    image = img_to_array(image)
    image = preprocess_input(image)

    data.append(image)
    labels.append(label)

  return data, labels

trainData, trainLabels = splitImageLabel(imageTrainPaths)
validData, validLabels = splitImageLabel(imageValidPaths)
testData, testLabels = splitImageLabel(imageTestPaths)

print(f'Length of trainData:{len(trainData)}')
print(f'Length of validData:{len(trainData)}')
print(f'Length of testData:{len(trainData)}')

def labelBinarize(data, Labels, lb):
  data = np.array(data, dtype='float32')
  Labels = np.array(Labels)
  #lb = LabelBinarizer()
  Labels = lb.fit_transform(Labels)
  Labels = to_categorical(Labels)
  return data, Labels

lb = LabelBinarizer()

trainData, trainLabels = labelBinarize(trainData, trainLabels, lb)
validData, validLabels = labelBinarize(validData, validLabels, lb)
testData, testLabels = labelBinarize(testData, testLabels, lb)

aug = ImageDataGenerator(
    rotation_range=20,
    zoom_range=0.15,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.15,
    horizontal_flip=True,
    fill_mode='nearest'
)

baseModel = MobileNetV2(weights='imagenet', include_top=False,
                        input_tensor=Input(shape=(224, 224, 3)))

headModel = baseModel.output
headModel = AveragePooling2D(pool_size=(7, 7))(headModel)
headModel = Flatten(name='flatten')(headModel)
headModel = Dense(128, activation='relu')(headModel)
headModel = Dropout(0.5)(headModel)
headModel = Dense(2, activation='softmax')(headModel)

model = Model(inputs=baseModel.input, outputs=headModel)

#model.summary()

for layer in baseModel.layers:
  layer.trainable = False

print("[INFO] compiling...")
opt = Adam(learning_rate=INIT_LR, decay=INIT_LR/EPOCHS)
model.compile(loss='binary_crossentropy', optimizer=opt,
              metrics=["accuracy"])

history = model.fit(aug.flow(trainData, trainLabels, batch_size=BS),
                    #steps_per_epoch=len(trainData)//BS,
                    validation_data=(validData, validLabels),
                    #validation_steps=len(validData)//BS,
                    epochs=EPOCHS)

print('[INFO] evaluating network...')
predIdxs = model.predict(testData, batch_size=BS)

predIdxs = np.argmax(predIdxs, axis=1)

print(classification_report(testLabels.argmax(axis=1), predIdxs,
                            target_names=lb.classes_))

print("[INFO] saving face mask detector model...")
model.save('face_mask_detector.model', save_format='h5')

N = EPOCHS
H = history

plt.style.use('ggplot')
plt.figure(figsize=(20, 12))
plt.plot(np.arange(0, N), H.history['loss'], label='train_loss')
plt.plot(np.arange(0, N), H.history['val_loss'], label='val_loss')
plt.plot(np.arange(0, N), H.history['accuracy'], label='train_accuracy')
plt.plot(np.arange(0, N), H.history['val_accuracy'], label='val_acc')
plt.title('Training Loss and Accuracy')
plt.xlabel('Epochs #')
plt.ylabel('Loss/Accuracy')
plt.legend(loc='center right')
plt.savefig('plot.png')
plt.show()































